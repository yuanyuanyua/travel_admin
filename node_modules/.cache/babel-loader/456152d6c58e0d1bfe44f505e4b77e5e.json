{"remainingRequest":"D:\\QQ下载文件\\BT\\travel_manage\\node_modules\\babel-loader\\lib\\index.js!D:\\QQ下载文件\\BT\\travel_manage\\src\\utils\\request.js","dependencies":[{"path":"D:\\QQ下载文件\\BT\\travel_manage\\src\\utils\\request.js","mtime":1590581950435},{"path":"D:\\QQ下载文件\\BT\\travel_manage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\QQ下载文件\\BT\\travel_manage\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport qs from 'qs'; //mint UI 框架，若不需要请全部注释掉\n// import {Indicator, Toast} from 'mint-ui'\n\nimport { Message } from \"element-ui\";\nimport Router from \"../router\";\nvar ct1 = 'application/x-www-form-urlencoded;charset=UTF-8';\nvar ct2 = \"application/json\"; //const api_base_url = \"http://localhost:8080/\"\n//const api_base_url = \"http://101.132.145.51:8080\"\n\nvar api_base_url = 'http://139.129.14.127:9090/'; //axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n//开启跨域请求携带session\n\naxios.defaults.withCredentials = true;\naxios.defaults.baseURL = api_base_url; //添加请求拦截器\n// axios.interceptors.request.use(config => {\n//   Indicator.open({\n//     text: '加载中...',\n//     spinnerType: 'fading-circle'\n//   })\n//   return config\n// },\n// err => {\n//   Indicator.close()\n//   Toast({\n//     message: '加载超时',\n//     position: 'middle',\n//     duration: 3000\n//   })\n//   return Promise.reject(err)\n// })\n// 添加响应拦截器，响应拦截器会在then/catch处理之前执行\n\naxios.interceptors.response.use(function (response) {\n  var timetp = null;\n  clearTimeout(timetp);\n  timetp = setTimeout(function () {\n    //Indicator.close()\n    clearTimeout(timetp);\n  }, 500); // 只将请求结果的data字段返回 \n  // if(response.data.code==\"403\"){\n  //   localStorage.removeItem(\"userInfo\")\n  //   Router.push('/login');\n  // }\n  // else\n\n  return response.data;\n}, function (error) {\n  Message.error(\"服务器异常，请稍后重试！\");\n  return Promise.reject(error); // 发生网络错误后会走到这里\n  // promise.resolve(\"ssss\")\n}); //返回一个Promise\n\nfunction fetch(url, params, type) {\n  var ct_type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (ct_type) axios.defaults.headers.post['Content-Type'] = ct2;else axios.defaults.headers.post['Content-Type'] = ct1;\n  return new Promise(function (resolve, reject) {\n    if (type == 'post') {\n      axios.post(url, ct_type ? params : qs.stringify(params)).then(function (response) {\n        resolve(response);\n      }, function (err) {\n        reject(err);\n      }).catch(function (error) {\n        reject(error);\n      });\n    } else {\n      axios.get(url, {\n        params: params\n      }).then(function (response) {\n        resolve(response);\n      }, function (err) {\n        reject(err);\n      }).catch(function (error) {\n        reject(error);\n      });\n    }\n  });\n}\n\nexport default {\n  fetch: fetch,\n  api_base_url: api_base_url\n};",{"version":3,"sources":["D:/QQ下载文件/BT/travel_manage/src/utils/request.js"],"names":["axios","qs","Message","Router","ct1","ct2","api_base_url","defaults","withCredentials","baseURL","interceptors","response","use","timetp","clearTimeout","setTimeout","data","error","Promise","reject","fetch","url","params","type","ct_type","headers","post","resolve","stringify","then","err","catch","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf,C,CAEA;AACA;;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAOC,MAAP;AAEA,IAAMC,GAAG,GAAG,iDAAZ;AACA,IAAMC,GAAG,GAAG,kBAAZ,C,CACA;AACA;;AACA,IAAMC,YAAY,GAAG,6BAArB,C,CACA;AACA;;AACAN,KAAK,CAACO,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AAEAR,KAAK,CAACO,QAAN,CAAeE,OAAf,GAAyBH,YAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAN,KAAK,CAACU,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,UAAAD,QAAQ,EAAI;AAC1C,MAAIE,MAAM,GAAG,IAAb;AACAC,EAAAA,YAAY,CAACD,MAAD,CAAZ;AACAA,EAAAA,MAAM,GAAGE,UAAU,CAAC,YAAM;AACxB;AACAD,IAAAA,YAAY,CAACD,MAAD,CAAZ;AACD,GAHkB,EAGhB,GAHgB,CAAnB,CAH0C,CAO1C;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOF,QAAQ,CAACK,IAAhB;AACH,CAdD,EAeA,UAAAC,KAAK,EAAI;AACPf,EAAAA,OAAO,CAACe,KAAR,CAAc,cAAd;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP,CAFO,CAGP;AACA;AACD,CApBD,E,CAsBA;;AACA,SAASG,KAAT,CAAeC,GAAf,EAAoBC,MAApB,EAA2BC,IAA3B,EAAiD;AAAA,MAAjBC,OAAiB,uEAAP,KAAO;AAC/C,MAAGA,OAAH,EACExB,KAAK,CAACO,QAAN,CAAekB,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA8CrB,GAA9C,CADF,KAGEL,KAAK,CAACO,QAAN,CAAekB,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA8CtB,GAA9C;AACF,SAAO,IAAIc,OAAJ,CAAY,UAACS,OAAD,EAAUR,MAAV,EAAqB;AACtC,QAAGI,IAAI,IAAE,MAAT,EAAgB;AACdvB,MAAAA,KAAK,CAAC0B,IAAN,CAAWL,GAAX,EAAeG,OAAO,GAACF,MAAD,GAAQrB,EAAE,CAAC2B,SAAH,CAAaN,MAAb,CAA9B,EACCO,IADD,CACM,UAAAlB,QAAQ,EAAI;AACdgB,QAAAA,OAAO,CAAChB,QAAD,CAAP;AACH,OAHD,EAGG,UAAAmB,GAAG,EAAI;AACNX,QAAAA,MAAM,CAACW,GAAD,CAAN;AACH,OALD,EAMCC,KAND,CAMO,UAACd,KAAD,EAAW;AACdE,QAAAA,MAAM,CAACF,KAAD,CAAN;AACH,OARD;AASD,KAVD,MAUM;AACJjB,MAAAA,KAAK,CAACgC,GAAN,CAAUX,GAAV,EAAc;AAACC,QAAAA,MAAM,EAANA;AAAD,OAAd,EACCO,IADD,CACM,UAAAlB,QAAQ,EAAI;AACdgB,QAAAA,OAAO,CAAChB,QAAD,CAAP;AACH,OAHD,EAGG,UAAAmB,GAAG,EAAI;AACRX,QAAAA,MAAM,CAACW,GAAD,CAAN;AACD,OALD,EAMCC,KAND,CAMO,UAACd,KAAD,EAAW;AACdE,QAAAA,MAAM,CAACF,KAAD,CAAN;AACH,OARD;AASD;AACF,GAtBM,CAAP;AAuBD;;AAED,eAAc;AACZG,EAAAA,KAAK,EAALA,KADY;AAEZd,EAAAA,YAAY,EAAZA;AAFY,CAAd","sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\n \n//mint UI 框架，若不需要请全部注释掉\n// import {Indicator, Toast} from 'mint-ui'\nimport {Message} from \"element-ui\"\nimport Router from \"../router\"\n\nconst ct1 = 'application/x-www-form-urlencoded;charset=UTF-8';\nconst ct2 = \"application/json\"\n//const api_base_url = \"http://localhost:8080/\"\n//const api_base_url = \"http://101.132.145.51:8080\"\nconst api_base_url = 'http://139.129.14.127:9090/'\n//axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n//开启跨域请求携带session\naxios.defaults.withCredentials = true\n \naxios.defaults.baseURL = api_base_url\n \n//添加请求拦截器\n// axios.interceptors.request.use(config => {\n//   Indicator.open({\n//     text: '加载中...',\n//     spinnerType: 'fading-circle'\n//   })\n//   return config\n// },\n// err => {\n//   Indicator.close()\n//   Toast({\n//     message: '加载超时',\n//     position: 'middle',\n//     duration: 3000\n//   })\n//   return Promise.reject(err)\n// })\n \n// 添加响应拦截器，响应拦截器会在then/catch处理之前执行\naxios.interceptors.response.use(response => {\n  let timetp = null\n  clearTimeout(timetp)\n  timetp = setTimeout(() => {\n    //Indicator.close()\n    clearTimeout(timetp)\n  }, 500)\n  // 只将请求结果的data字段返回 \n  // if(response.data.code==\"403\"){\n  //   localStorage.removeItem(\"userInfo\")\n  //   Router.push('/login');\n  // }\n  // else\n    return response.data\n},\nerror => {\n  Message.error(\"服务器异常，请稍后重试！\")\n  return Promise.reject(error);\n  // 发生网络错误后会走到这里\n  // promise.resolve(\"ssss\")\n})\n \n//返回一个Promise\nfunction fetch(url, params,type,ct_type = false) {\n  if(ct_type)\n    axios.defaults.headers.post['Content-Type'] = ct2\n  else\n    axios.defaults.headers.post['Content-Type'] = ct1\n  return new Promise((resolve, reject) => {\n    if(type=='post'){\n      axios.post(url,ct_type?params:qs.stringify(params))\n      .then(response => {\n          resolve(response);\n      }, err => {\n          reject(err);\n      })\n      .catch((error) => {\n          reject(error)\n      })\n    } else{\n      axios.get(url,{params})\n      .then(response => {\n          resolve(response);\n      }, err => {\n        reject(err);\n      })\n      .catch((error) => {\n          reject(error)\n      })\n    }   \n  })\n}\n\nexport default{\n  fetch,\n  api_base_url\n}"]}]}